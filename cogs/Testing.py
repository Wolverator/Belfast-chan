import datetime
import os
import re
import string
import urllib.request

import pandas
from discord.ext import commands
from pandas import DataFrame, ExcelWriter

dir_path = os.path.dirname(os.path.realpath(__file__)).replace("cogs", "")
description_pattern = "test description\n" \
                      + "Health: **{0}/{1}**\nMoney: **{2}**GC **{3}**SS **{4}**P\nEncumb.: **{5}/{6}**"


class Testing(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def pic(self, ctx):
        await ctx.message.add_reaction('üïë')

        bgPic = "1.webp"
        sprite1 = "2.webp"
        sprite2 = "3.webp"
        sprite3 = "4.webp"
        sprite4 = "5.webp"
        sprite5 = "6.webp"
        sprite6 = "7.webp"

        self.processPicsWithNoiseThreshold(bgPic, sprite1, 7, 7)
        self.processPicsWithNoiseThreshold(bgPic, sprite2, 7, 7)
        self.processPicsWithNoiseThreshold(bgPic, sprite3, 7, 7)
        self.processPicsWithNoiseThreshold(bgPic, sprite4, 7, 7)
        self.processPicsWithNoiseThreshold(bgPic, sprite5, 7, 7)
        self.processPicsWithNoiseThreshold(bgPic, sprite6, 7, 7)

        # await ctx.send(file=discord.File('new'+transparentPic))
        await ctx.message.add_reaction('‚úÖ')
        await ctx.message.remove_reaction('üïë', self.bot.user)
        await ctx.message.delete(delay=15)

    def processPicsWithNoiseThreshold(self, _bgPic, _spritePic, _noiseThreshold, _blur):
        from PIL import Image, ImageChops, ImageFilter

        bg = Image.open(_bgPic)
        sprite = Image.open(_spritePic)
        diff1 = ImageChops.difference(bg, sprite).convert('RGBA').filter(ImageFilter.GaussianBlur(_blur))
        newimdata = []
        transparent = (0, 0, 0, 0)
        fillColor = (255, 0, 0, 255)
        dat = diff1.getdata()
        for color in dat:
            if color[0] + color[1] + color[2] <= _noiseThreshold:
                newimdata.append(transparent)
            else:
                newimdata.append(fillColor)
        mask = Image.new('RGBA', diff1.size)
        mask.putdata(newimdata)

        ImageChops.composite(sprite, Image.new("RGBA", sprite.size, 0), mask) \
            .save('new' + _spritePic.replace('.webp', '_' + str(_noiseThreshold) + '_' + str(_blur * 10) + '.webp'), exact=True, loseless=True, quality=100, method=6)

        # original quality
        sprite.save('0' + _spritePic.replace('.webp', '_0.png'))
        # combined quality
        ImageChops.composite(sprite, bg, mask) \
            .save('0' + _spritePic.replace('.webp', '_' + str(_noiseThreshold) + '_' + str(_blur * 10) + '.png'), exact=True, loseless=True, quality=100, method=6)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def lul(self, ctx):
        await ctx.message.add_reaction('üïë')

        from PIL import Image

        im1 = Image.open("9.webp")
        im1.save("teset.webp", exact=True, loseless=True, quality=100, method=6)

        await ctx.message.remove_reaction('üïë', self.bot.user)
        await ctx.message.add_reaction('‚úÖ')
        await ctx.message.delete(delay=15)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def pc(self, ctx):
        await ctx.message.add_reaction('üïë')
        import discord
        from PIL import Image, ImageChops

        im1 = Image.open("9.webp")
        im2 = Image.open("new9_7_70.webp")

        diff1 = ImageChops.difference(im1, im2).convert('RGBA')

        newimdata = []
        transparent = (0, 0, 0, 0)
        fillColor = (255, 0, 0, 255)
        dat = diff1.getdata()
        for color in dat:
            if color[0] + color[1] + color[2] <= 2:
                newimdata.append(transparent)
            else:
                newimdata.append(fillColor)
        newim = Image.new('RGBA', diff1.size)
        newim.putdata(newimdata)

        newim.crop(newim.getbbox())
        newim.save('diff.webp')

        await ctx.send(file=discord.File("diff.webp"))

        # await ctx.send(dat[0])
        await ctx.message.remove_reaction('üïë', self.bot.user)
        await ctx.message.add_reaction('‚úÖ')
        await ctx.message.delete(delay=15)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def ggn(self, ctx):
        await ctx.message.add_reaction('üïë')

        path = "D:\\Misc\\VNs\\Grisaia 1 debug\\result_sherhan\\clean texts for translations"
        ignored_names = ["JB", "SP", "SP2", "SP3", "019", "???", "–ü–æ–∂–∏–ª–æ–π\\fs„ÄÄ\\fn–¥–µ—Ç–µ–∫—Ç–∏–≤", "–î–µ—Ç–µ–∫—Ç–∏–≤",
                         "–ú—É–∂—á–∏–Ω–∞", "–ú–æ–ª–æ–¥–∞—è\\fs„ÄÄ\\fn–∂–µ–Ω—â–∏–Ω–∞", "–Æ–¥–∂–∏", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π", "$str60", "leave_empty", "scene_title"]

        for f in os.listdir(path):
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path) and file_path.endswith(".xlsx") and not "~" in f:
                new_text_names = []
                xls = pandas.ExcelFile(file_path)
                df = xls.parse(0)
                text_names = list(df[df.columns[1]]).copy()
                while len(text_names) > 0:
                    new_text_names.append(text_names.pop(0))
                    name = text_names.pop(0)
                    if name not in ignored_names:
                        new_text_names.append(self.translateName(name))
                    else:
                        new_text_names.append(name)

                df1 = DataFrame({"Lines numbers": list(df[df.columns[0]]).copy(),
                                 "Character name": new_text_names,
                                 "Line text": list(df[df.columns[2]]).copy()})
                writer = ExcelWriter(file_path)
                df1.to_excel(writer, sheet_name='sheetName', index=False, na_rep='NaN')
                for column in df1:
                    column_length = min(df1[column].astype(str).map(len).max(), 120)
                    col_idx = df1.columns.get_loc(column)
                    writer.sheets['sheetName'].set_column(col_idx, col_idx, column_length)
                writer.save()

        await ctx.message.add_reaction('‚úÖ')
        await ctx.message.delete(delay=15)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def ts(self, ctx):
        await ctx.channel.trigger_typing()
        path = "D:\\Misc\\VNs\\Grisaia 1 debug\\translate here\\clean texts"
        WRITE_TRANSLATION_HERE = "(write translation here)"
        com_total = 0
        com_trans = 0
        ama_total = 0
        ama_trans = 0
        mak_total = 0
        mak_trans = 0
        mic_total = 0
        mic_trans = 0
        sac_total = 0
        sac_trans = 0
        yum_total = 0
        yum_trans = 0

        for f in os.listdir(path):
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path) and file_path.endswith(".xlsx") and not "~" in f:
                xls = pandas.ExcelFile(file_path)
                df = xls.parse(0)
                text_lines = list(df[df.columns[2]]).copy()
                # result += "op.xlsx has " + str(f[:2]) + " lines"
                while len(text_lines) > 0:
                    text_lines.pop(0)
                    translated = 0
                    if not text_lines.pop(0) == WRITE_TRANSLATION_HERE:
                        translated = 1
                    match f[:2]:
                        case "op" | "co":
                            com_total += 1
                            com_trans += translated
                        case "am":
                            ama_total += 1
                            ama_trans += translated
                        case "ma":
                            mak_total += 1
                            mak_trans += translated
                        case "mi":
                            mic_total += 1
                            mic_trans += translated
                        case "sa":
                            sac_total += 1
                            sac_trans += translated
                        case "yu":
                            yum_total += 1
                            yum_trans += translated
                        case _:
                            pass

        result = "**–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ Grisaia no Kajitsu:**" \
                 + "\n–û–±—â–∏–π: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(com_trans, com_total, round((com_trans / com_total) * 100, 2))
        result += "\n–ê–º–∞–Ω–µ: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(ama_trans, ama_total, round((ama_trans / ama_total) * 100, 2))
        result += "\n–ú–∞–∫–∏–Ω–∞: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(mak_trans, mak_total, round((mak_trans / mak_total) * 100, 2))
        result += "\n–ú–∏—á–∏—Ä—É: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(mic_trans, mic_total, round((mic_trans / mic_total) * 100, 2))
        result += "\n–°–∞—á–∏: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(sac_trans, sac_total, round((sac_trans / sac_total) * 100, 2))
        result += "\n–Æ–º–∏–∫–æ: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(yum_trans, yum_total, round((yum_trans / yum_total) * 100, 2))
        sum_trans = ama_trans + com_trans + mak_trans + mic_trans + sac_trans + yum_trans
        sum_total = ama_total + com_total + mak_total + mic_total + sac_total + yum_total
        result += "\n\n–ò—Ç–æ–≥–æ: {0}/{1} —Å—Ç—Ä–æ–∫, **{2}%**".format(sum_trans, sum_total, round((sum_trans / sum_total) * 100, 2))

        result += "\n{0}".format(str(datetime.datetime.now()).split('.')[0])
        await ctx.send(result)
        await ctx.message.delete(delay=5)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def tsen(self, ctx):
        await ctx.channel.trigger_typing()
        path = "D:\\Misc\\VNs\\Grisaia 1 debug\\translate here\\clean texts"
        WRITE_TRANSLATION_HERE = "(write translation here)"
        com_total = 0
        com_trans = 0
        ama_total = 0
        ama_trans = 0
        mak_total = 0
        mak_trans = 0
        mic_total = 0
        mic_trans = 0
        sac_total = 0
        sac_trans = 0
        yum_total = 0
        yum_trans = 0

        for f in os.listdir(path):
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path) and file_path.endswith(".xlsx") and not "~" in f:
                xls = pandas.ExcelFile(file_path)
                df = xls.parse(0)
                text_lines = list(df[df.columns[2]]).copy()
                # result += "op.xlsx has " + str(f[:2]) + " lines"
                while len(text_lines) > 0:
                    text_lines.pop(0)
                    translated = 0
                    if not text_lines.pop(0) == WRITE_TRANSLATION_HERE:
                        translated = 1
                    match f[:2]:
                        case "op" | "co":
                            com_total += 1
                            com_trans += translated
                        case "am":
                            ama_total += 1
                            ama_trans += translated
                        case "ma":
                            mak_total += 1
                            mak_trans += translated
                        case "mi":
                            mic_total += 1
                            mic_trans += translated
                        case "sa":
                            sac_total += 1
                            sac_trans += translated
                        case "yu":
                            yum_total += 1
                            yum_trans += translated
                        case _:
                            pass

        result = "**Translation progress Grisaia no Kajitsu:**" \
                 + "\nCommon: {0}/{1} lines, **{2}%**".format(com_trans, com_total, round((com_trans / com_total) * 100, 2))
        result += "\nAmane: {0}/{1} lines, **{2}%**".format(ama_trans, ama_total, round((ama_trans / ama_total) * 100, 2))
        result += "\nMakina: {0}/{1} lines, **{2}%**".format(mak_trans, mak_total, round((mak_trans / mak_total) * 100, 2))
        result += "\nMichiru: {0}/{1} lines, **{2}%**".format(mic_trans, mic_total, round((mic_trans / mic_total) * 100, 2))
        result += "\nSachi: {0}/{1} lines, **{2}%**".format(sac_trans, sac_total, round((sac_trans / sac_total) * 100, 2))
        result += "\nYumiko: {0}/{1} lines, **{2}%**".format(yum_trans, yum_total, round((yum_trans / yum_total) * 100, 2))
        sum_trans = ama_trans + com_trans + mak_trans + mic_trans + sac_trans + yum_trans
        sum_total = ama_total + com_total + mak_total + mic_total + sac_total + yum_total
        result += "\n\nTotal: {0}/{1} lines, **{2}%**".format(sum_trans, sum_total, round((sum_trans / sum_total) * 100, 2))

        result += "\n{0}".format(str(datetime.datetime.now()).split('.')[0])
        await ctx.send(result)
        await ctx.message.delete(delay=5)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def tsw(self, ctx):
        await ctx.channel.trigger_typing()
        path = "D:\\Misc\\VNs\\Grisaia 1 debug\\translate here\\clean texts"
        WRITE_TRANSLATION_HERE = "(write translation here)"
        com_total = 0
        com_trans = 0
        ama_total = 0
        ama_trans = 0
        mak_total = 0
        mak_trans = 0
        mic_total = 0
        mic_trans = 0
        sac_total = 0
        sac_trans = 0
        yum_total = 0
        yum_trans = 0

        for f in os.listdir(path):
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path) and file_path.endswith(".xlsx") and not "~" in f:
                xls = pandas.ExcelFile(file_path)
                df = xls.parse(0)
                text_lines = list(df[df.columns[2]]).copy()
                # result += "op.xlsx has " + str(f[:2]) + " lines"
                while len(text_lines) > 0:
                    original_line = str(text_lines.pop(0))
                    translated_line = str(text_lines.pop(0))
                    original = len(original_line.translate(str.maketrans('', '', string.punctuation)).split())
                    translated = 0
                    if not translated_line == WRITE_TRANSLATION_HERE:
                        translated = len(translated_line.translate(str.maketrans('', '', string.punctuation)).split())
                    match f[:2]:
                        case "op" | "co":
                            com_total += original
                            com_trans += translated
                        case "am":
                            ama_total += original
                            ama_trans += translated
                        case "ma":
                            mak_total += original
                            mak_trans += translated
                        case "mi":
                            mic_total += original
                            mic_trans += translated
                        case "sa":
                            sac_total += original
                            sac_trans += translated
                        case "yu":
                            yum_total += original
                            yum_trans += translated
                        case _:
                            pass

        result = "**–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ Grisaia no Kajitsu:**\n(—Å–ª–æ–≤ —Å—Ç–∞–ª–æ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ / —Å–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)" \
                 + "\n–û–±—â–∏–π: {0} / {1} —Å–ª–æ–≤, {2}%".format(com_trans, com_total, round((com_trans / com_total) * 100, 2))
        result += "\n–ê–º–∞–Ω–µ: {0} / {1} —Å–ª–æ–≤, {2}%".format(ama_trans, ama_total, round((ama_trans / ama_total) * 100, 2))
        result += "\n–ú–∞–∫–∏–Ω–∞: {0} / {1} —Å–ª–æ–≤, {2}%".format(mak_trans, mak_total, round((mak_trans / mak_total) * 100, 2))
        result += "\n–ú–∏—á–∏—Ä—É: {0} / {1} —Å–ª–æ–≤, {2}%".format(mic_trans, mic_total, round((mic_trans / mic_total) * 100, 2))
        result += "\n–°–∞—á–∏: {0} / {1} —Å–ª–æ–≤, {2}%".format(sac_trans, sac_total, round((sac_trans / sac_total) * 100, 2))
        result += "\n–Æ–º–∏–∫–æ: {0} / {1} —Å–ª–æ–≤, {2}%".format(yum_trans, yum_total, round((yum_trans / yum_total) * 100, 2))
        sum_trans = ama_trans + com_trans + mak_trans + mic_trans + sac_trans + yum_trans
        sum_total = ama_total + com_total + mak_total + mic_total + sac_total + yum_total
        result += "\n\n–ò—Ç–æ–≥–æ: {0} / {1} —Å–ª–æ–≤, {2}%".format(sum_trans, sum_total, round((sum_trans / sum_total) * 100, 2))

        result += "\n{0}".format(str(datetime.datetime.now()).split('.')[0])
        await ctx.send(result)
        await ctx.message.delete(delay=5)

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def sao(self, ctx):
        template = "https://9bc-a3e-2200g0.streamalloha.live/hs/46/1657661945/XHT7pydqrti9LmT6SG_J5A/395/628395/seg-{0}-f2-v1-f5-a1.ts"
        msg = await ctx.send("Starting...")
        for i in range(1, 735):
            if not os.path.exists("part{0}.ts".format(i)):
                try:
                    urllib.request.urlretrieve(template.format(i), "part{0}.ts".format(i))
                    await msg.edit(content="Finished {0}/735 parts...".format(i))
                except Exception as e:
                    await ctx.send("**ERROR**\n" + str(e) + "\n\nTry again")
                    break

        with open("SAO Progressive.ts", 'wb') as f:
            for i in range(1, 735):
                with open("part{0}.ts".format(i), 'rb') as f1:
                    f.write(f1.read())
                    f1.close()
                    await msg.edit(content="Compiled {0}/735 parts...".format(i))
            f.close()
        await msg.delete()
        await ctx.send("Done!")

    @commands.command(pass_context=True)
    @commands.is_owner()
    async def translatecommonphrases(self, ctx):
        lines = {}
        lines_to_translate = {
            'Hrm...': '–•–º-–º...',
            'I [see...]': '–ü–æ–Ω—è—Ç–Ω–æ...',
            'Huh...?': '–ê?..',
            'Ah...': '–ê...',
            'Yeah...': '–î–∞...',
            '...Huh?': '–ê?..',
            '...What?': '–ß—Ç–æ?..',
            'Yeah.': '–î–∞.'
        }
        path = "D:\\Misc\\VNs\\Grisaia 1 debug\\translate here\\clean texts"
        WRITE_TRANSLATION_HERE = "(write translation here)"

        for f in os.listdir(path):
            lines_text = []
            file_path = os.path.join(path, f)
            if os.path.isfile(file_path) and file_path.endswith(".xlsx") and not "~" in f:
                xls = pandas.ExcelFile(file_path)
                df = xls.parse(0)
                text_lines = list(df[df.columns[2]]).copy()
                while len(text_lines) > 0:
                    line = str(text_lines.pop(0))
                    translation = text_lines.pop(0)

                    if translation == WRITE_TRANSLATION_HERE:
                        if line not in lines.keys():
                            lines[line] = 1
                        else:
                            lines[line] = lines[line] + 1

                        try:
                            if (None == re.search('[a-zA-Z]', line)):
                                lines_text.append(line)
                                lines_text.append(line)
                            elif (line in lines_to_translate.keys()):
                                lines_text.append(line)
                                lines_text.append(lines_to_translate[line])
                            else:
                                lines_text.append(line)
                                lines_text.append(translation)
                        except Exception as ex:
                            await ctx.send("Error processing line ```" + line + "```")
                    else:
                        lines_text.append(line)
                        lines_text.append(translation)

                if (len(list(df[df.columns[0]])) != len(list(df[df.columns[1]]))) or (len(list(df[df.columns[0]])) != len(lines_text)):
                    await ctx.send(str(len(list(df[df.columns[0]]))) + " " + str(len(list(df[df.columns[1]]))) + " " + str(len(lines_text)) + " in ```" + file_path + "```")
                df1 = DataFrame({"Lines numbers": list(df[df.columns[0]]).copy(),
                                 "Character name": list(df[df.columns[1]]).copy(),
                                 "Line text": lines_text})
                writer = ExcelWriter(file_path)
                df1.to_excel(writer, sheet_name='sheetName', index=False, na_rep='NaN')
                for column in df1:
                    column_length = min(df1[column].astype(str).map(len).max(), 120)
                    col_idx = df1.columns.get_loc(column)
                    writer.sheets['sheetName'].set_column(col_idx, col_idx, column_length)
                writer.save()

        i = 0
        result_text = ""
        for w in sorted(lines, key=lines.get, reverse=True):
            if i < 20:
                i += 1
                result_text += str(i) + ")`" + str(w) + "` = " + str(lines[w]) + str(None == re.search('[a-zA-Z]', w)) + "\n"
        await ctx.send(result_text)

    def translateName(self, _name: str) -> str:
        new_name = _name \
            .replace("Cardboard\\fs„ÄÄ\\fnCreature", "–ö–∞—Ä—Ç–æ–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ") \
            .replace("General\\fs„ÄÄ\\fnSpareribs", "–ì–µ–Ω–µ—Ä–∞–ª –†—ë–±—Ä—ã—à–∫–∏") \
            .replace("BBQ\\fs„ÄÄ\\fnBelligerent", "–í–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ë–∞—Ä–±–µ–∫—é") \
            .replace("Tunafish\\fs„ÄÄ\\fnMan", "–ß–µ–ª–æ–≤–µ–∫-—Ç—É–Ω–µ—Ü") \
            .replace("Woman\\fs„ÄÄ\\fnNext\\fs„ÄÄ\\fnDoor", "–°–æ—Å–µ–¥–∫–∞") \
            .replace("Military\\fs„ÄÄ\\fnCommentator", "–í–æ–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä") \
            .replace("Stooped\\fs„ÄÄ\\fnGrandmother", "–°—É—Ç—É–ª–∞—è –±–∞–±—É—à–∫–∞") \
            .replace("Mom\\fs„ÄÄ\\fnand\\fs„ÄÄ\\fnDad", "–ú–∞–º–∞+–ü–∞–ø–∞") \
            .replace("Elderly\\fs„ÄÄ\\fnDetective", "–ü–æ–∂–∏–ª–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤") \
            .replace("Economic\\fs„ÄÄ\\fnAnalyst", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ") \
            .replace("Chief\\fs„ÄÄ\\fnSecretary", "–ì–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å") \
            .replace("Yumiko+Michiru+Amane", "–Æ–º–∏–∫–æ+–ú–∏—á–∏—Ä—É+–ê–º–∞–Ω–µ") \
            .replace("Three\\fs„ÄÄ\\fn[People]", "–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞") \
            .replace("Investigator\\fs„ÄÄ\\fnB", "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ë") \
            .replace("Investigator\\fs„ÄÄ\\fnA", "–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ê") \
            .replace("Professor\\fs„ÄÄ\\fnDave", "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –î–µ–π–≤") \
            .replace("Sachi+Michiru+Makina", "–°–∞—á–∏+–ú–∏—á–∏—Ä—É+–ú–∞–∫–∏–Ω–∞") \
            .replace("Michiru+Sachi+Yumiko", "–ú–∏—á–∏—Ä—É+–°–∞—á–∏+–Æ–º–∏–∫–æ") \
            .replace("Sachi`s\\fs„ÄÄ\\fnUncle", "–î—è–¥—è –°–∞—á–∏") \
            .replace("Yumiko+Makina+Amane", "–Æ–º–∏–∫–æ+–ú–∞–∫–∏–Ω–∞+–ê–º–∞–Ω–µ") \
            .replace("Energetic\\fs„ÄÄ\\fnKid", "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫") \
            .replace("Innocent\\fs„ÄÄ\\fnGirl", "–ù–µ–≤–∏–Ω–Ω–∞—è –¥–µ–≤–æ—á–∫–∞") \
            .replace("Friendly\\fs„ÄÄ\\fnLady", "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –¥–∞–º–∞") \
            .replace("Three\\fs„ÄÄ\\fnPeople", "–¢—Ä–∏ —á–µ–ª–æ–≤–µ–∫–∞") \
            .replace("Delivery\\fs„ÄÄ\\fnMan", "–ö—É—Ä—å–µ—Ä") \
            .replace("Classmate\\fs„ÄÄ\\fnD", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫(—Ü–∞) –ì") \
            .replace("Classmate\\fs„ÄÄ\\fnC", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫(—Ü–∞) –í") \
            .replace("Classmate\\fs„ÄÄ\\fnB", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫(—Ü–∞) –ë") \
            .replace("Classmate\\fs„ÄÄ\\fnA", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫(—Ü–∞) –ê") \
            .replace("Young\\fs„ÄÄ\\fnWoman", "–ú–æ–ª–æ–¥–∞—è –∂–µ–Ω—â–∏–Ω–∞") \
            .replace("Kidnapper\\fs„ÄÄ\\fnB", "–ü–æ—Ö–∏—Ç–∏—Ç–µ–ª—å –ë") \
            .replace("Kidnapper\\fs„ÄÄ\\fnA", "–ü–æ—Ö–∏—Ç–∏—Ç–µ–ª—å –ê") \
            .replace("Four\\fs„ÄÄ\\fnPeople", "–ß–µ—Ç—ã—Ä–µ —á–µ–ª–æ–≤–µ–∫–∞") \
            .replace("Naughty\\fs„ÄÄ\\fnKid", "–ù–µ–ø–æ—Å–ª—É—à–Ω—ã–π –ø–∞—Ü–∞–Ω") \
            .replace("Blond\\fs„ÄÄ\\fnMan", "–ë–ª–æ–Ω–¥–∏–Ω—á–∏–∫") \
            .replace("Servant\\fs„ÄÄ\\fn3", "–ü—Ä–∏—Å–ª—É–≥–∞ 3") \
            .replace("Servant\\fs„ÄÄ\\fn2", "–ü—Ä–∏—Å–ª—É–≥–∞ 2") \
            .replace("Servant\\fs„ÄÄ\\fn1", "–ü—Ä–∏—Å–ª—É–≥–∞ 1") \
            .replace("Other\\fs„ÄÄ\\fnMen", "–î—Ä—É–≥–∏–µ –º—É–∂—á–∏–Ω—ã") \
            .replace("Old\\fs„ÄÄ\\fnLady", "–î–∞–º–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ") \
            .replace("Michiru+Makina", "–ú–∏—á–∏—Ä—É+–ú–∞–∫–∏–Ω–∞") \
            .replace("Bush\\fs„ÄÄ\\fnDog", "–ö—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤—ã–π –ø—ë—Å") \
            .replace("Yumiko+Michiru", "–Æ–º–∏–∫–æ+–ú–∏—á–∏—Ä—É") \
            .replace("Makina+Michiru", "–ú–∞–∫–∏–Ω–∞+–ú–∏—á–∏—Ä—É") \
            .replace("Man\\fs„ÄÄ\\fnA+B", "–ú—É–∂—á–∏–Ω—ã –ê+–ë") \
            .replace("Businesswoman", "–ë–∏–∑–Ω–µ—Å-–ª–µ–¥–∏") \
            .replace("Michiru+Amane", "–ú–∏—á–∏—Ä—É+–ê–º–∞–Ω–µ") \
            .replace("Yumiko+Makina", "–Æ–º–∏–∫–æ+–ú–∞–∫–∏–Ω–∞") \
            .replace("Girl\\fs„ÄÄ\\fnB", "–î–µ–≤—É—à–∫–∞ –ë") \
            .replace("Girl\\fs„ÄÄ\\fnA", "–î–µ–≤—É—à–∫–∞ –ê") \
            .replace("Receptionist", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") \
            .replace("Amane+Makina", "–ê–º–∞–Ω–µ+–ú–∞–∫–∏–Ω–∞") \
            .replace("Yumiko+Amane", "–Æ–º–∏–∫–æ+–ê–º–∞–Ω–µ") \
            .replace("Makina+Amane", "–ú–∞–∫–∏–Ω–∞+–ê–º–∞–Ω–µ") \
            .replace("Makina+Sachi", "–ú–∞–∫–∏–Ω–∞+–°–∞—á–∏") \
            .replace("Sachi+Makina", "–ú–∞–∫–∏–Ω–∞+–°–∞—á–∏") \
            .replace("Grandmother", "–ë–∞–±—É—à–∫–∞") \
            .replace("Man\\fs„ÄÄ\\fnG", "–ú—É–∂—á–∏–Ω–∞ –ñ") \
            .replace("Man\\fs„ÄÄ\\fnF", "–ú—É–∂—á–∏–Ω–∞ –ï") \
            .replace("Man\\fs„ÄÄ\\fnE", "–ú—É–∂—á–∏–Ω–∞ –î") \
            .replace("Man\\fs„ÄÄ\\fnD", "–ú—É–∂—á–∏–Ω–∞ –ì") \
            .replace("Man\\fs„ÄÄ\\fnC", "–ú—É–∂—á–∏–Ω–∞ –í") \
            .replace("Man\\fs„ÄÄ\\fnB", "–ú—É–∂—á–∏–Ω–∞ –ë") \
            .replace("Man\\fs„ÄÄ\\fnA", "–ú—É–∂—á–∏–Ω–∞ –ê") \
            .replace("Man\\fs„ÄÄ\\fn5", "–ú—É–∂—á–∏–Ω–∞ 5") \
            .replace("Man\\fs„ÄÄ\\fn4", "–ú—É–∂—á–∏–Ω–∞ 4") \
            .replace("Man\\fs„ÄÄ\\fn3", "–ú—É–∂—á–∏–Ω–∞ 3") \
            .replace("Man\\fs„ÄÄ\\fn2", "–ú—É–∂—á–∏–Ω–∞ 2") \
            .replace("Man\\fs„ÄÄ\\fn1", "–ú—É–∂—á–∏–Ω–∞ 1") \
            .replace("Kid\\fs„ÄÄ\\fnB", "–†–µ–±—ë–Ω–æ–∫ –ë") \
            .replace("Kid\\fs„ÄÄ\\fnA", "–†–µ–±—ë–Ω–æ–∫ –ê") \
            .replace("Yuuji&Sachi", "–Æ–¥–∂–∏+–°–∞—á–∏") \
            .replace("Businessman", "–ë–∏–∑–Ω–µ—Å–º–µ–Ω") \
            .replace("Grandfather", "–î–µ–¥—É—à–∫–∞") \
            .replace("Greengrocer", "–ü—Ä–æ–¥–∞–≤–µ—Ü –æ–≤–æ—â–µ–π") \
            .replace("Son-in-Law", "–ó—è—Ç—å") \
            .replace("Classmates", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏") \
            .replace("Muramatsu", "–ú—É—Ä–∞–º–∞—Ü—É") \
            .replace("Conductor", "–ö–æ–Ω–¥—É–∫—Ç–æ—Ä") \
            .replace("Secretary", "–°–µ–∫—Ä–µ—Ç–∞—Ä—å") \
            .replace("Physician", "–í—Ä–∞—á") \
            .replace("Detective", "–î–µ—Ç–µ–∫—Ç–∏–≤") \
            .replace("Kittymeow", "–ö–∏—Ç—Ç–∏–º—è—É") \
            .replace("Voicemail", "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫?") \
            .replace("Printcher", "–î–∏—Ä–µ–∫—Ç–∏—â–µ") \
            .replace("Narration", "–†–∞—Å—Å–∫–∞–∑—á–∏–∫") \
            .replace("Policeman", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π") \
            .replace("Sakashita", "–°–∞–∫–∞—à–∏—Ç–∞") \
            .replace("Moderator", "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä") \
            .replace("Principal", "–î–∏—Ä–µ–∫—Ç–æ—Ä") \
            .replace("Matsuyama", "–ú–∞—Ü—É—è–º–∞") \
            .replace("Employee", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫") \
            .replace("Students", "–°—Ç—É–¥–µ–Ω—Ç—ã") \
            .replace("Servants", "–ü—Ä–∏—Å–ª—É–≥–∏") \
            .replace("Daughter", "–î–æ—á–∫–∞") \
            .replace("Reporter", "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç") \
            .replace("Shopkeep", "–•–æ–∑—è–∏–Ω –º–∞–≥–∞–∑–∏–Ω–∞") \
            .replace("Masataka", "–ú–∞—Å–∞—Ç–∞–∫–∞") \
            .replace("Michiaki", "–ú–∏—á–∏–∞–∫–∏") \
            .replace("Masahiko", "–ú–∞—Å–∞—Ö–∏–∫–æ") \
            .replace("Everyone", "–í—Å–µ") \
            .replace("Meowmel", "–ú—è—É–º–µ–ª—å") \
            .replace("Tadashi", "–¢–∞–¥–∞—à–∏") \
            .replace("Laborer", "–†–∞–±–æ—á–∏–π") \
            .replace("Females", "–ñ–µ–Ω—â–∏–Ω—ã") \
            .replace("Servant", "–°–ª—É–≥–∞") \
            .replace("M-Chiru", "–ú-—á–∏—Ä—É") \
            .replace("Matcher", "–ú–∞–∫–∏–Ω–∏—â–µ") \
            .replace("Satcher", "–°–∞—á–∏—â–µ") \
            .replace("Mitcher", "–ú–∏—á–∏—Ä–∏—â–µ") \
            .replace("Sakurai", "–°–∞–∫—É—Ä–∞–π") \
            .replace("Hirooka", "–•–∏—Ä—É–æ–∫–∞") \
            .replace("Captain", "–ö–∞–ø–∏—Ç–∞–Ω") \
            .replace("Michiru", "–ú–∏—á–∏—Ä—É") \
            .replace("Worker", "–†–∞–±–æ—á–∏–π") \
            .replace("Kanako", "–ö–∞–Ω–∞–∫–æ") \
            .replace("Toshie", "–¢–æ—à–∏—ç") \
            .replace("Misako", "–ú–∏—Å–∞–∫–æ") \
            .replace("Hitomi", "–•–∏—Ç–æ–º–∏") \
            .replace("Komine", "–ö–æ–º–∏–Ω–µ") \
            .replace("Mother", "–ú–∞—Ç—å") \
            .replace("Doctor", "–î–æ–∫—Ç–æ—Ä") \
            .replace("Father", "–û—Ç–µ—Ü") \
            .replace("Rommel", "–†–æ–º–º–µ–ª—å") \
            .replace("Driver", "–í–æ–¥–∏—Ç–µ–ª—å") \
            .replace("Otsuka", "–û—Ü—É–∫–∞") \
            .replace("Kiyoka", "–ö–∏—ë–∫–∞") \
            .replace("Sawada", "–°–∞–≤–∞–¥–∞") \
            .replace("Sarina", "–°–∞—Ä–∏–Ω–∞") \
            .replace("Sacchi", "–°–∞—á–∏") \
            .replace("Y-Miko", "–Æ-–∏–∫–æ") \
            .replace("K-Mine", "–ö-–º–∏–Ω–µ") \
            .replace("C-Zuru", "–ß-–∑—É—Ä—É") \
            .replace("Chiara", "–ö–∏–∞—Ä–∞") \
            .replace("Atcher", "–ê–º–∞–Ω–∏—â–µ") \
            .replace("Nanano", "–ù–∞–Ω–∞–Ω–æ") \
            .replace("Kitten", "–ö–æ—Ç—ë–Ω–æ–∫") \
            .replace("Komori", "–ö–æ–º–æ—Ä–∏") \
            .replace("Sakuma", "–°–∞–∫—É–º–∞") \
            .replace("Kaneda", "–ö–∞–Ω–µ–¥–∞") \
            .replace("Kazuki", "–ö–∞–∑—É–∫–∏") \
            .replace("Suzune", "–°—É–∑—É–Ω–µ") \
            .replace("Yumiko", "–Æ–º–∏–∫–æ") \
            .replace("Makina", "–ú–∞–∫–∏–Ω–∞") \
            .replace("Pilot", "–ü–∏–ª–æ—Ç") \
            .replace("Child", "–†–µ–±—ë–Ω–æ–∫") \
            .replace("Nurse", "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞") \
            .replace("Phone", "–¢–µ–ª–µ—Ñ–æ–Ω") \
            .replace("Tutor", "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä") \
            .replace("Okuda", "–û–∫—É–¥–∞") \
            .replace("Ihara", "–ò—Ö–∞—Ä–∞") \
            .replace("Woman", "–ñ–µ–Ω—â–∏–Ω–∞") \
            .replace("Carny", "–ö–∞—Ä–Ω–∏") \
            .replace("Clerk", "–ö–ª–µ—Ä–∫") \
            .replace("Renge", "–†–µ–Ω–∂") \
            .replace("Voice", "–ì–æ–ª–æ—Å") \
            .replace("Ibuki", "–ò–±—É–∫–∏") \
            .replace("Ritsu", "–†–∏—Ü—É") \
            .replace("Sachi", "–°–∞—á–∏") \
            .replace("Yuuji", "–Æ–¥–∂–∏") \
            .replace("Amane", "–ê–º–∞–Ω–µ") \
            .replace("Yuma", "–Æ–º–∞") \
            .replace("Aide", "–ê–π–¥–µ") \
            .replace("Girl", "–î–µ–≤–æ—á–∫–∞") \
            .replace("Atou", "–ê—Ç–æ—É") \
            .replace("A-Ne", "–ê-–Ω–µ") \
            .replace("Ochi", "–û—á–∏") \
            .replace("Men", "–ú—É–∂—á–∏–Ω—ã") \
            .replace("Dad", "–ü–∞–ø–∞") \
            .replace("Mom", "–ú–∞–º–∞") \
            .replace("Man", "–ú—É–∂—á–∏–Ω–∞") \
            .replace("Kid", "–ü–∞—Ü–∞–Ω") \
            .replace("Cat", "–ö–æ—Ç") \
            .replace(" ", "\\fs„ÄÄ\\fn")
        return new_name


def setup(bot):
    bot.add_cog(Testing(bot))
